/*
Дано
Текстовый файл по фиксированному пути c:\list.txt состоящий из слов. Слово может состоять только из маленьких букв
английского алфавита, всё остальное разделители. Размер слова не превышает 30 символов. Размер файла не ограничен
(в том смысле, что нельзя заранее выделить массив слов).

Задача
Посчитать количество вхождения каждого слова в файле и напечатать результат парами (слово - количество)
в отсортированном порядке. Сортировка слов по алфавиту.

Пример
Вход:
beep, astarta, color, beep

Выход:
astarta - 1
beep - 2
color - 1

Требования к коду
Язык с++
Считывание файла функциями: fopen(“c:\\list.txt”, “rt”), fgetc(), fclose()
Печать результата: printf()
Аварийный выход: exit(0)
Дополнительные функции: strlen(), strcmp()
Работа с памятью: new, delete
Использование других функций и каких-то специальных библиотек не допускается.
Комментирование кода достаточно самое минимальное.
Требования к алгоритму
Использовать простой линейный список, сделанный в ‘ручную’.
НЕ усложнять программу алгоритмами хеширования, оптимизацией скорости сортировки, выделением первой буквы и т.п. Проще – лучше.
Структура данных должна быть минимальна и заточена именно под эту задачу, то есть закладываться под потенциальное развитие программы НЕ нужно.
Подумать, КОГДА проще сортировать слова.

Критерии оценки
Качество и ‘красота’ исходного текста
Отсутствие алгоритмических ошибок
Отказоустойчивость (входные данные нарушают условия задачи)
Структурированность кода.
Время выполнения (обычно составляет 2 часа, но это не главное).
*/

#include "File.h"

#include "SortedWordList.h"
#include "SortedWordReader.h"

#include "Word.h"

#include <utility>

int main(int argc, char** argv)
{
    const int& iref = int(10);
    File file("list.txt", "rt");
    SortedWordReader wordReader(file, SortOrder::Ascending);
    wordReader.words().print();

    return 0;
}